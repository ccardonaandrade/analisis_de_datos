setwd("C:/Users/ccard/OneDrive/Documentos/GitHub/analisis_de_datos/clase10")
library(tidyverse)
library(janitor)
library(knitr)
library(broom)
default <- read_csv("credit_payments.csv")
default <- default %>%
clean_names()
View(default)
ggplot(default, aes(x = limit_bal, y = default)) +
geom_point() +
labs(y = "Getting 7+ hours of sleep")
default <- read_csv("credit_demographics.csv")
default <- default %>%
clean_names()
ggplot(default, aes(x = limit_bal, y = default)) +
geom_point() +
labs(y = "Getting 7+ hours of sleep")
ggplot(default, aes(x = limit_bal, y = default)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "Getting 7+ hours of sleep")
# Set a seed for reproducibility
set.seed(123)
# Simulate data
n <- 500  # Number of observations
# Black Voting Age Population (continuous between 0 and 1)
black_voting_age_population <- runif(n, min = 0, max = 1)
# Black Representative Elected (binary outcome, probabilistic based on population)
black_representative_elected <- rbinom(n, size = 1, prob = black_voting_age_population)
# Combine data into a data frame
data <- data.frame(
Black_Voting_Age_Population = black_voting_age_population,
Black_Representative_Elected = black_representative_elected
)
# Plot the data using ggplot2
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point(alpha = 0.8, color = "blue") +
labs(
title = "Dichotomous Independent Vars.",
x = "Black Voting Age Population",
y = "Black Representative Elected"
) +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"))
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "Getting 7+ hours of sleep")
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "Getting 7+ hours of sleep") +
theme_minimal()
ggplot(sleep_age, aes(x = Age, y = prop)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method = "lm",fullrange = TRUE, se = FALSE) +
labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2)
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method = "lm",fullrange = TRUE, se = FALSE) +
labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2)
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method = "glm",fullrange = TRUE, se = FALSE) +
labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2)
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method ="glm", method.args = list(family = "binomial"),
fullrange = TRUE, se = FALSE) +  labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2)
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method = "lm",fullrange = TRUE, se = FALSE) +
labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2)
# Set a seed for reproducibility
set.seed(123)
# Simulate data
n <- 500  # Number of observations
# Black Voting Age Population (continuous between 0 and 1)
black_voting_age_population <- runif(n, min = 0, max = 1)
# Create a linear probability model, but cap the outcome at 0 or 1
true_linear_probs <- 2 * black_voting_age_population - 0.5  # Exaggerated slope and intercept
# Generate binary outcome, but cap it within the [0, 1] range
black_representative_elected <- ifelse(true_linear_probs > 0.5, 1, 0)
# Combine data into a data frame
data <- data.frame(
Black_Voting_Age_Population = black_voting_age_population,
Black_Representative_Elected = black_representative_elected
)
# Perform the linear regression
linear_model <- lm(Black_Representative_Elected ~ Black_Voting_Age_Population, data = data)
# Plot the data and the linear regression line
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point(alpha = 0.8, color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Linear regression line
labs(
title = "Linear Regression Predicting Probabilities Beyond [0, 1]",
x = "Black Voting Age Population",
y = "Black Representative Elected"
) +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"))
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "Getting 7+ hours of sleep") +
theme_minimal()
# Set a seed for reproducibility
set.seed(123)
# Simulate data
n <- 500  # Number of observations
# Black Voting Age Population (continuous between 0 and 1)
black_voting_age_population <- runif(n, min = 0, max = 1)
# Create a linear probability model, but add randomness/noise
true_linear_probs <- 2 * black_voting_age_population - 0.5
# Adding randomness: apply a logistic transformation to introduce some noise
probabilities <- pnorm(true_linear_probs, mean = 0, sd = 1)  # Probabilities now have more spread
# Generate binary outcome based on the probabilities
black_representative_elected <- rbinom(n, size = 1, prob = probabilities)
# Combine data into a data frame
data <- data.frame(
Black_Voting_Age_Population = black_voting_age_population,
Black_Representative_Elected = black_representative_elected
)
# Perform the linear regression
linear_model <- lm(Black_Representative_Elected ~ Black_Voting_Age_Population, data = data)
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "Getting 7+ hours of sleep") +
theme_minimal()
# Set a seed for reproducibility
set.seed(123)
# Simulate data
n <- 500  # Number of observations
# Black Voting Age Population (continuous between 0 and 1)
black_voting_age_population <- runif(n, min = 0, max = 1)
# Create a linear probability model, but cap the outcome at 0 or 1
true_linear_probs <- 2 * black_voting_age_population - 0.5  # Exaggerated slope and intercept
# Generate binary outcome, but cap it within the [0, 1] range
black_representative_elected <- ifelse(true_linear_probs > 0.5, 1, 0)
# Combine data into a data frame
data <- data.frame(
Black_Voting_Age_Population = black_voting_age_population,
Black_Representative_Elected = black_representative_elected
)
# Perform the linear regression
linear_model <- lm(Black_Representative_Elected ~ Black_Voting_Age_Population, data = data)
# Plot the data and the linear regression line
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point(alpha = 0.8, color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Linear regression line
labs(
title = "Linear Regression Predicting Probabilities Beyond [0, 1]",
x = "Black Voting Age Population",
y = "Black Representative Elected"
) +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"))
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "Getting 7+ hours of sleep") +
theme_minimal()
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method = "lm",fullrange = TRUE, se = FALSE) +
labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2)
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method ="glm", method.args = list(family = "binomial"),
fullrange = TRUE, se = FALSE) +  labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2)
set.seed(123)
# Simulate data
n <- 500  # Number of observations
# Black Voting Age Population (continuous between 0 and 1)
black_voting_age_population <- runif(n, min = 0, max = 1)
# Create a linear probability model with noise
true_linear_probs <- 2 * black_voting_age_population - 0.5  # Linear model, slope ensures that predictions can go outside [0,1]
# Adding noise directly to the probabilities to make it less deterministic
noisy_probs <- true_linear_probs + rnorm(n, mean = 0, sd = 0.5)  # Adding some noise to make the outcome more random
# Generate binary outcome based on the noisy probabilities
black_representative_elected <- ifelse(noisy_probs > 0.5, 1, 0)
# Combine data into a data frame
data <- data.frame(
Black_Voting_Age_Population = black_voting_age_population,
Black_Representative_Elected = black_representative_elected
)
# Plot the data and the linear regression line
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point(alpha = 0.8, color = "blue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Linear regression line
labs(
title = "Linear Regression Predicting Probabilities Beyond [0, 1]",
x = "Black Voting Age Population",
y = "Black Representative Elected"
) +
theme_minimal() +
theme(plot.title = element_text(size = 16, face = "bold"))
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "Getting 7+ hours of sleep") +
theme_minimal()
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method = "lm",fullrange = TRUE, se = FALSE) +
labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2)
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method ="glm", method.args = list(family = "binomial"),
fullrange = TRUE, se = FALSE) +  labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2)
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
labs(y = "Getting 7+ hours of sleep") +
theme_minimal()
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method = "lm",fullrange = TRUE, se = FALSE) +
labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2) +
theme_minimal()
ggplot(data, aes(x = Black_Voting_Age_Population, y = Black_Representative_Elected)) +
geom_point() +
geom_hline(yintercept = c(0,1), lty = 2) +
stat_smooth(method ="glm", method.args = list(family = "binomial"),
fullrange = TRUE, se = FALSE) +  labs(y = "P(7+ hours of sleep)") +
xlim(-0.1, 1.1) +
ylim(-1, 2) +
theme_minimal()
install.packages("mfx")
setwd("C:/Users/ccard/OneDrive/Documentos/GitHub/analisis_de_datos/clase10")
library(tidyverse)
library(janitor)
library(knitr)
library(broom)
default <- read_csv("credit_demographics.csv")
default <- default %>%
clean_names()
View(default)
ggplot(default, aes(x = default, y = age)) +
geom_boxplot() +
labs(x = "Default - 1: yes, 0: no",
y = "Age",
title = "Age vs. Default")
ggplot(default, aes(x = factor(default), y = age)) +
geom_boxplot() +
labs(x = "Default - 1: yes, 0: no",
y = "Age",
title = "Age vs. Default")
ggplot(default, aes(x = factor(default), y = age)) +
geom_boxplot() +
labs(x = "Default - 1: yes, 0: no",
y = "Age",
title = "Age vs. Default")
library(tidyverse)
default <- read_csv("C:/Users/ccard/OneDrive/Documentos/GitHub/analisis_de_datos/credit_default/credit_demographics.csv")
default <- default %>%
clean_names()
default <- default %>%
mutate(
default_string = case_when(
default == 1 ~ "Default",
default == 0 ~ "No Default",
TRUE ~ NA_character_  # Assign NA for any unmatched values
),
sex_string = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
TRUE ~ NA_character_  # Assign NA for any unmatched values
),
education_string = case_when(
education == 1 ~ "Graduate School",
education == 2 ~ "University",
education == 3 ~ "High School",
education == 4 ~ "Others",
education == 5 ~ "Unknown",
education == 6 ~ "Unknown",
TRUE ~ NA_character_  # Assign NA for any unmatched values
),
marriage_string = case_when(
marriage == 1 ~ "Married",
marriage == 2 ~ "Single",
marriage == 3 ~ "Other",
TRUE ~ NA_character_  # Assign NA for any unmatched values
)
)
default <- default %>%
clean_names() %>%
mutate(
default_string = case_when(
default == 1 ~ "Default",
default == 0 ~ "No Default",
is.na(default) ~ NA_character_
),
sex_string = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
is.na(sex) ~ NA_character_
),
education_string = case_when(
education == 1 ~ "Graduate School",
education == 2 ~ "University",
education == 3 ~ "High School",
education %in% c(4, 5, 6) ~ "Unknown",  # Consider simplifying
is.na(education) ~ NA_character_
),
marriage_string = case_when(
marriage == 1 ~ "Married",
marriage == 2 ~ "Single",
marriage == 3 ~ "Other",
is.na(marriage) ~ NA_character_
)
)
library(janitor)
default <- default %>%
clean_names() %>%
mutate(
default_string = case_when(
default == 1 ~ "Default",
default == 0 ~ "No Default",
is.na(default) ~ NA_character_
),
sex_string = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
is.na(sex) ~ NA_character_
),
education_string = case_when(
education == 1 ~ "Graduate School",
education == 2 ~ "University",
education == 3 ~ "High School",
education %in% c(4, 5, 6) ~ "Unknown",  # Consider simplifying
is.na(education) ~ NA_character_
),
marriage_string = case_when(
marriage == 1 ~ "Married",
marriage == 2 ~ "Single",
marriage == 3 ~ "Other",
is.na(marriage) ~ NA_character_
)
)
View(default)
default <- default |>
select(id, limit_bal, sex_string, education_string, marriage_string, age)
glimpse(default)
library(readr)
write_csv(default, "C:/Users/ccard/OneDrive/Documentos/GitHub/analisis_de_datos/credit_default/default_data.csv")
default <- read_csv("C:/Users/ccard/OneDrive/Documentos/GitHub/analisis_de_datos/credit_default/credit_demographics.csv")
default <- default %>%
clean_names() %>%
mutate(
default_string = case_when(
default == 1 ~ "Default",
default == 0 ~ "No Default",
is.na(default) ~ NA_character_
),
sex_string = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
is.na(sex) ~ NA_character_
),
education_string = case_when(
education == 1 ~ "Graduate School",
education == 2 ~ "University",
education == 3 ~ "High School",
education %in% c(4, 5, 6) ~ "Unknown",  # Consider simplifying
is.na(education) ~ NA_character_
),
marriage_string = case_when(
marriage == 1 ~ "Married",
marriage == 2 ~ "Single",
marriage == 3 ~ "Other",
is.na(marriage) ~ NA_character_
)
)
default <- default |>
select(id_client=id, balance=limit_bal, sex=sex_string, education=education_string, marriage=marriage_string, age)
View(default)
default <- read_csv("C:/Users/ccard/OneDrive/Documentos/GitHub/analisis_de_datos/credit_default/credit_demographics.csv")
default <- default %>%
clean_names() %>%
mutate(
default_string = case_when(
default == 1 ~ "Default",
default == 0 ~ "No Default",
is.na(default) ~ NA_character_
),
sex_string = case_when(
sex == 1 ~ "Male",
sex == 2 ~ "Female",
is.na(sex) ~ NA_character_
),
education_string = case_when(
education == 1 ~ "Graduate School",
education == 2 ~ "University",
education == 3 ~ "High School",
education %in% c(4, 5, 6) ~ "Unknown",  # Consider simplifying
is.na(education) ~ NA_character_
),
marriage_string = case_when(
marriage == 1 ~ "Married",
marriage == 2 ~ "Single",
marriage == 3 ~ "Other",
is.na(marriage) ~ NA_character_
)
)
default <- default |>
select(id_client=id, default, default_string, balance=limit_bal, sex=sex_string, education=education_string, marriage=marriage_string, age)
write_csv(default, "C:/Users/ccard/OneDrive/Documentos/GitHub/analisis_de_datos/credit_default/default_data.csv")
default |> count(default_string)
ggplot(default, aes(fill=sex_string, x=default_string)) +
geom_bar() +
labs(title = "Number of Clients by Sex and Default Payment",
fill='Sex',
x = "",
y = "Frecuency") +
theme_minimal()
ggplot(default, aes(fill=sex, x=default_string)) +
geom_bar() +
labs(title = "Number of Clients by Sex and Default Payment",
fill='Sex',
x = "",
y = "Frecuency") +
theme_minimal()
ggplot(default, aes(fill=sex, x=default_string)) +
geom_bar(position="fill") +
labs(title = "Number of Clients by Sex and Default Payment",
fill='Sex',
x = "",
y = "Proportion") +
theme_minimal()
ggplot(default, aes(fill=sex, x=default_string)) +
geom_bar(position="fill") +
labs(title = "Number of Clients by Sex and Default Payment",
fill='Sex',
x = "",
y = "Proportion") +
theme_minimal()
