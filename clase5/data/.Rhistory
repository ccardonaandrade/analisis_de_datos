sample = i
)
}))
ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
geom_linerange(size = 1) +
geom_hline(aes(yintercept = population_mean, linetype = "Media Poblacional"),
color = "navy", size = 1) +
scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("Si", "No")) +
scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
labs(title = "100 Intervalos de Confianza para el Danceability promedio",
x = "Muestra",
y = "Intervalo de Confianza",
color = "Incluye la Media Poblacional") +
theme_minimal()
# Set seed for reproducibility
set.seed(13)
# Number of samples
n_samples <- 100
# Population mean (assumed or known)
population_mean <- mean(data$danceability, na.rm = TRUE)
# Function to compute confidence interval
compute_ci <- function(sampled_data) {
result <- t.test(sampled_data$danceability, conf.level = 0.95)
ci <- result$conf.int
return(ci)
}
# Generate 100 confidence intervals
ci_list <- replicate(n_samples, compute_ci(sample_n(data, 100)), simplify = FALSE)
# Create a data frame for plotting
ci_df <- do.call(rbind, lapply(1:n_samples, function(i) {
data.frame(
lower = ci_list[[i]][1],
upper = ci_list[[i]][2],
include_mean = ci_list[[i]][1] <= population_mean & ci_list[[i]][2] >= population_mean,
sample = i
)
}))
ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
geom_linerange(size = 1) +
geom_hline(aes(yintercept = population_mean, linetype = "Media Poblacional"),
color = "navy", size = 1) +
scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("Si", "No")) +
scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
labs(title = "100 Intervalos de Confianza para el Danceability promedio",
x = "Muestra",
y = "Intervalo de Confianza",
color = "Incluye la Media Poblacional") +
theme_minimal()
# Number of samples
n_samples <- 100
# Population mean (assumed or known)
population_mean <- mean(data$danceability, na.rm = TRUE)
# Function to compute confidence interval
compute_ci_90 <- function(sampled_data) {
result <- t.test(sampled_data$danceability, conf.level = 0.90)
ci <- result$conf.int
return(ci)
}
# Generate 100 confidence intervals
ci_list <- replicate(n_samples, compute_ci_90(sample_n(data, 100)), simplify = FALSE)
# Create a data frame for plotting
ci_df <- do.call(rbind, lapply(1:n_samples, function(i) {
data.frame(
lower = ci_list[[i]][1],
upper = ci_list[[i]][2],
include_mean = ci_list[[i]][1] <= population_mean & ci_list[[i]][2] >= population_mean,
sample = i
)
}))
# Plot the confidence intervals
ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
geom_linerange(size = 1) +
geom_hline(aes(yintercept = population_mean, linetype = "Media Poblacional"),
color = "navy", size = 1) +
scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("Si", "No")) +
scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
labs(title = "100 Intervalos de Confianza para el Danceability promedio",
x = "Muestra",
y = "Intervalo de Confianza",
color = "Incluye la Media Poblacional") +
theme_minimal()
# Definimos el nivel de confianza (e.g., 95%)
confidence_level90 <- 0.90
# Definimos el nivel de confianza (e.g., 95%)
confidence_level90 <- 0.90
z_score2 <- qnorm((1 + confidence_level90) / 2)
z_score2
# Calculamos los intervalos de confianza
ic_inf2 <- media_muestral - z_score2 * error_std
## Calculando el de 90%
result <- t.test(muestra$danceability, conf.level = 0.90)
# Tomamos una muestra de 100 canciones
muestra <- data %>% sample_n(100)
# Calculamos la media muestral
media_muestral <- mean(muestra$danceability, na.rm = TRUE)
media_muestral
# Calculamos el error estÃ¡ndar
error_std <- sd(muestra$danceability, na.rm = TRUE) / sqrt(nrow(muestra))
error_std
# Definimos el nivel de confianza (e.g., 95%)
confidence_level <- 0.95
z_score <- qnorm((1 + confidence_level) / 2)
z_score
# Calculamos los intervalos de confianza
ic_inf <- media_muestral - z_score * error_std
ic_sup <- media_muestral + z_score * error_std
# Definamoslo como intervalo
ci <- c(ic_inf, ic_sup)
ci
## Otra manera es usando el comando t.test
result <- t.test(muestra$danceability, conf.level = 0.95)
result
# Extraemos los intervalos
ic_2 <- result$conf.int
ic_2
## Calculando el de 90%
result <- t.test(muestra$danceability, conf.level = 0.90)
result
# Extraemos los intervalos
ic_90 <- result$conf.int
ic_90
## Calculando el de 99%
result <- t.test(muestra$danceability, conf.level = 0.99)
result
# Extraemos los intervalos
ic_99 <- result$conf.int
ic_99
# Calculate confidence intervals at different levels
result_95 <- t.test(muestra$danceability, conf.level = 0.95)
result_90 <- t.test(muestra$danceability, conf.level = 0.90)
result_99 <- t.test(muestra$danceability, conf.level = 0.99)
# Extract confidence intervals
ic_95 <- result_95$conf.int
ic_90 <- result_90$conf.int
ic_99 <- result_99$conf.int
# Combine the confidence intervals into a data frame
ci_df <- data.frame(
Level = c("90%", "95%", "99%"),
Lower = c(ic_90[1], ic_95[1], ic_99[1]),
Upper = c(ic_90[2], ic_95[2], ic_99[2])
)
View(ci_df)
ggplot(ci_df, aes(x = Level, ymin = Lower, ymax = Upper)) +
geom_linerange(size = 1.5, aes(color = Level)) +           # Plot confidence intervals
geom_point(aes(y = Lower), size = 3) +                    # Add lower bound points
geom_point(aes(y = Upper), size = 3) +                    # Add upper bound points
geom_hline(aes(yintercept = population_mean, linetype = "Population Mean"),
color = "black", size = 1) +                   # Add dashed line for population mean
scale_linetype_manual(name = "", values = "dashed") +     # Customize dashed line in legend
labs(title = "Confidence Intervals for Danceability Mean",
x = "Confidence Level",
y = "Danceability",
color = "Confidence Level") +
theme_minimal() +
theme(legend.position = "bottom")
ggplot(ci_df, aes(x = Level, ymin = Lower, ymax = Upper)) +
geom_linerange(size = 1.5, aes(color = Level)) +           # Plot confidence intervals
geom_point(aes(y = Lower), size = 3) +                    # Add lower bound points
geom_point(aes(y = Upper), size = 3) +                    # Add upper bound points
geom_hline(aes(yintercept = population_mean, linetype = "Population Mean"),
color = "black", size = 1) +                   # Add dashed line for population mean
scale_linetype_manual(name = "", values = "dashed") +     # Customize dashed line in legend
labs(title = "Confidence Intervals for Danceability Mean",
x = "Confidence Level",
y = "Danceability",
color = "Confidence Level") +
theme_minimal() +
theme(legend.position = "roght")
ggplot(ci_df, aes(x = Level, ymin = Lower, ymax = Upper)) +
geom_linerange(size = 1.5, aes(color = Level)) +           # Plot confidence intervals
geom_point(aes(y = Lower), size = 3) +                    # Add lower bound points
geom_point(aes(y = Upper), size = 3) +                    # Add upper bound points
geom_hline(aes(yintercept = population_mean, linetype = "Population Mean"),
color = "black", size = 1) +                   # Add dashed line for population mean
scale_linetype_manual(name = "", values = "dashed") +     # Customize dashed line in legend
labs(title = "Confidence Intervals for Danceability Mean",
x = "Confidence Level",
y = "Danceability",
color = "Confidence Level") +
theme_minimal() +
theme(legend.position = "right")
ggplot(ci_df, aes(x = Level, ymin = Lower, ymax = Upper)) +
geom_linerange(size = 1.5, aes(color = Level)) +           # Plot confidence intervals
geom_point(aes(y = Lower), size = 3) +                    # Add lower bound points
geom_point(aes(y = Upper), size = 3) +                    # Add upper bound points
geom_hline(aes(yintercept = population_mean, linetype = "Population Mean"),
color = "black", size = 1) +                   # Add dashed line for population mean
scale_linetype_manual(name = "", values = "dashed") +     # Customize dashed line in legend
labs(title = "Intervalos de Confianza para la Danceability promedio",
x = "Nivel de Confianza",
y = "Danceability",
color = "Nivel de Confianza") +
theme_minimal() +
theme(legend.position = "right")
# Plot the normal distribution with highlighted regions
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "navy", size = 1) +
scale_x_continuous(breaks = c(4.5, 4.6),
labels = c(expression(mu == 4.5), expression(bar(X) == 4.6)),
limits = c(4.3, 4.7),
expand = expansion(mult = c(0, 0))  # Remove extra space around x-axis
) +
labs(title = "",
x = "", y = "Density") +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_text(size = 14),  # Increase the size of x and y axis text
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank(),  # Remove y-axis ticks
axis.title.y = element_blank(),  # Remove y-axis title
axis.ticks.x = element_line(color = "black", size = 1),  # Increase x-axis tick size
axis.ticks.length = unit(0.3, "cm"),  # Increase length of x-axis ticks
axis.text.x = element_text(size = 18, margin = margin(t = 5)),  # Ensure x-axis text is visible
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank()   # Remove minor grid lines
)+
geom_segment(aes(x = 4.3, xend = 4.7, y = 0, yend = 0), color = "black", size = 0.5)  # Add x-axis line
ggplot(filtered_data, aes(x = danceability, y = year)) +
geom_density_ridges2()
library(ggridges)
ggplot(filtered_data, aes(x = danceability, y = year)) +
geom_density_ridges2()
View(filtered_data)
ggplot(filtered_data, aes(x = danceability, y = factor(year)) +
ggplot(filtered_data, aes(x = danceability, y = factor(year))) +
geom_density_ridges2()
sdsda
sad
sad
asd
ggplot(filtered_data, aes(x = danceability, y = factor(year))) +
geom_density_ridges2()
ggplot(filtered_data, aes(x = danceability, y = factor(year))) +
geom_density_ridges2() +
labs(y = "Year")
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = factor(year))) +
geom_density_ridges()
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c(name = "Depth", option = "C")
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c(name = "Danceability", option = "C")
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c(name = "Danceability", option = "C")+
labs(y = "Year")
ggplot(filtered_data, aes(x = danceability, y = factor(year))) +
geom_density_ridges2() +
labs(y = "Year",
x = "Danceability")
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = factor(year))) +
geom_density_ridges() +
labs(y = "Year",
x = "Danceability")
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c(name = "Danceability", option = "C")+
labs(y = "Year",
x = "Danceability")
ggplot(filtered_data, aes(x = danceability, y = factor(year))) +
geom_density_ridges2() +
labs(y = "Year",
x = "Danceability")
ggplot(filtered_data, aes(x = danceability, y = factor(year))) +
geom_density_ridges2() +
labs(y = "Year",
x = "Danceability")
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c(name = "Danceability", option = "C")+
labs(y = "Year",
x = "Danceability")
ggplot(filtered_data, aes(x = danceability, y = factor(year))) +
geom_density_ridges2() +
labs(y = "Year",
x = "Danceability")
ggplot(filtered_data, aes(x = danceability, y = factor(year))) +
geom_density_ridges2() +
labs(y = "Year",
x = "Danceability")
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = factor(year))) +
geom_density_ridges() +
labs(y = "Year",
x = "Danceability")
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c(name = "Danceability", option = "C")+
labs(y = "Year")
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = factor(year))) +
geom_density_ridges() +
labs(y = "Year",
x = "Danceability") +
scale_fill_discrete(name = "Year")
ggplot(filtered_data, aes(x = danceability, y = factor(year), fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_c(name = "Danceability", option = "C")+
labs(y = "Year")
# Set seed for reproducibility
set.seed(13)
# Number of samples
n_samples <- 100
# Population mean (assumed or known)
population_mean <- mean(data$danceability, na.rm = TRUE)
# Function to compute confidence interval
compute_ci <- function(sampled_data) {
result <- t.test(sampled_data$danceability, conf.level = 0.95)
ci <- result$conf.int
return(ci)
}
# Generate 100 confidence intervals
ci_list <- replicate(n_samples, compute_ci(sample_n(data, 100)), simplify = FALSE)
# Create a data frame for plotting
ci_df <- do.call(rbind, lapply(1:n_samples, function(i) {
data.frame(
lower = ci_list[[i]][1],
upper = ci_list[[i]][2],
include_mean = ci_list[[i]][1] <= population_mean & ci_list[[i]][2] >= population_mean,
sample = i
)
}))
ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
geom_linerange(size = 1) +
geom_hline(aes(yintercept = population_mean, linetype = "Media Poblacional"),
color = "navy", size = 1) +
scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("Si", "No")) +
scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
labs(title = "100 Intervalos de Confianza para el Danceability promedio",
x = "Muestra",
y = "Intervalo de Confianza",
color = "Incluye la Media Poblacional") +
theme_minimal()
# Number of samples
n_samples <- 100
# Population mean (assumed or known)
population_mean <- mean(data$danceability, na.rm = TRUE)
# Function to compute confidence interval
compute_ci_90 <- function(sampled_data) {
result <- t.test(sampled_data$danceability, conf.level = 0.90)
ci <- result$conf.int
return(ci)
}
# Generate 100 confidence intervals
ci_list <- replicate(n_samples, compute_ci_90(sample_n(data, 100)), simplify = FALSE)
# Create a data frame for plotting
ci_df <- do.call(rbind, lapply(1:n_samples, function(i) {
data.frame(
lower = ci_list[[i]][1],
upper = ci_list[[i]][2],
include_mean = ci_list[[i]][1] <= population_mean & ci_list[[i]][2] >= population_mean,
sample = i
)
}))
# Plot the confidence intervals
ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
geom_linerange(size = 1) +
geom_hline(aes(yintercept = population_mean, linetype = "Media Poblacional"),
color = "navy", size = 1) +
scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("Si", "No")) +
scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
labs(title = "100 Intervalos de Confianza para el Danceability promedio",
x = "Muestra",
y = "Intervalo de Confianza",
color = "Incluye la Media Poblacional") +
theme_minimal()
# Set seed for reproducibility
set.seed(13)
# Number of samples
n_samples <- 100
# Population mean (assumed or known)
population_mean <- mean(data$danceability, na.rm = TRUE)
# Function to compute confidence interval
compute_ci <- function(sampled_data) {
result <- t.test(sampled_data$danceability, conf.level = 0.95)
ci <- result$conf.int
return(ci)
}
# Generate 100 confidence intervals
ci_list <- replicate(n_samples, compute_ci(sample_n(data, 100)), simplify = FALSE)
# Create a data frame for plotting
ci_df <- do.call(rbind, lapply(1:n_samples, function(i) {
data.frame(
lower = ci_list[[i]][1],
upper = ci_list[[i]][2],
include_mean = ci_list[[i]][1] <= population_mean & ci_list[[i]][2] >= population_mean,
sample = i
)
}))
ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
geom_linerange(size = 1) +
geom_hline(aes(yintercept = population_mean, linetype = "Media Poblacional"),
color = "navy", size = 1) +
scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("Si", "No")) +
scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
labs(title = "100 Intervalos de Confianza para el Danceability promedio",
x = "Muestra",
y = "Intervalo de Confianza",
color = "Incluye la Media Poblacional") +
theme_minimal()
ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
geom_linerange(size = 1) +
geom_hline(aes(yintercept = population_mean, linetype = "Media Poblacional"),
color = "navy", size = 1) +
scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("Si", "No")) +
scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
labs(title = "100 Intervalos de Confianza para el Danceability promedio",
x = "Muestra",
y = "Intervalo de Confianza",
color = "Incluye la Media Poblacional") +
ylim(0.60, 0.75) +  # Set y-axis limits
theme_minimal()
# Number of samples
n_samples <- 100
# Population mean (assumed or known)
population_mean <- mean(data$danceability, na.rm = TRUE)
# Function to compute confidence interval
compute_ci_90 <- function(sampled_data) {
result <- t.test(sampled_data$danceability, conf.level = 0.90)
ci <- result$conf.int
return(ci)
}
# Generate 100 confidence intervals
ci_list <- replicate(n_samples, compute_ci_90(sample_n(data, 100)), simplify = FALSE)
# Create a data frame for plotting
ci_df <- do.call(rbind, lapply(1:n_samples, function(i) {
data.frame(
lower = ci_list[[i]][1],
upper = ci_list[[i]][2],
include_mean = ci_list[[i]][1] <= population_mean & ci_list[[i]][2] >= population_mean,
sample = i
)
}))
# Plot the confidence intervals
ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
geom_linerange(size = 1) +
geom_hline(aes(yintercept = population_mean, linetype = "Media Poblacional"),
color = "navy", size = 1) +
scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("Si", "No")) +
scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
labs(title = "100 Intervalos de Confianza para el Danceability promedio",
x = "Muestra",
y = "Intervalo de Confianza",
color = "Incluye la Media Poblacional") +
ylim(0.60, 0.75) +  # Set y-axis limits
theme_minimal()
# Plot the confidence intervals
ggplot(ci_df, aes(x = sample, ymin = lower, ymax = upper, color = include_mean)) +
geom_linerange(size = 1) +
geom_hline(aes(yintercept = population_mean, linetype = "Media Poblacional"),
color = "navy", size = 1) +
scale_color_manual(values = c("#FFBF00", "#365E32"), labels = c("Si", "No")) +
scale_linetype_manual(name = "", values = c("Media Poblacional" = "dashed")) +
labs(title = "100 Intervalos de Confianza para el Danceability promedio",
x = "Muestra",
y = "Intervalo de Confianza",
color = "Incluye la Media Poblacional") +
ylim(0.60, 0.725) +  # Set y-axis limits
theme_minimal()
data
data %>% arrange(popularity) %>% head(10)
data %>% filter(artist) %>% arrange(popularity) %>% head(10)
data %>% filter(c(artist,popularity)) %>% arrange(popularity) %>% head(10)
data %>% select(c(artist,popularity)) %>% arrange(popularity) %>% head(10)
data %>% select(c(artist,popularity)) %>% arrange(popularity, desc) %>% head(10)
data %>% select(c(artist,popularity)) %>% arrange(popularity) %>% head(10)
# Top 10 popular
data %>%
select(artist, popularity) %>%
arrange(desc(popularity)) %>%
head(10)
# What about Bad Bunny?
data %>%
select(artist, popularity) %>%
filter(artist=="Bad Bunny") %>%
head(10)
# What about Bad Bunny?
data %>%
select(artist, song, popularity) %>%
filter(artist=="Bad Bunny") %>%
head(10)
ggplot(data, aes(x=popularity, y=danceability))+geom_point()
ggplot(data, aes(x=popularity, y=danceability))+geom_point()+geom_smooth()
1.95/2
1.99/2
install.packages("ggpubr")
True
o
danceability <- data %>%
filter(year=c(2000,2019))%>%
select(year, danceability)
danceability <- data %>%
filter(year==c(2000,2019))%>%
select(year, danceability)
View(danceability)
ggboxplot(danceability, x = "year", y = "danceability",
color = "year", palette = c("navy", "#dbb818"),
order = c("2000", "2019"),
ylab = "Danceability", xlab = "Year")
library(ggpubr)
ggboxplot(danceability, x = "year", y = "danceability",
color = "year", palette = c("navy", "#dbb818"),
order = c("2000", "2019"),
ylab = "Danceability", xlab = "Year")
ggboxplot(danceability, x = "year", y = "danceability",
color = "year", palette = c("navy", "#dbb818"),
order = c("2000", "2019"),
ylab = "Danceability", xlab = "Year") +
theme(axis.text = element_text(size = 14),  # Increase axis text size
axis.title = element_text(size = 16), # Increase axis title size
legend.text = element_text(size = 14), # Increase legend text size
legend.title = element_text(size = 16)) # Increase legend title size
