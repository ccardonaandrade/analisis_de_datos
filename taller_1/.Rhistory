library(scales)
library(ggmosaic)
install.packages("ggmosaic")
library(openintro)
blizzard_salary <- blizzard_salary
blizzard_salary <- blizzard_salary |>
mutate(
annual_salary = case_when(
salary_type == "week" ~ current_salary * 52,
salary_type == "hour" ~ current_salary * 40 * 52,
TRUE ~ current_salary
),
performance_rating = if_else(performance_rating == "Developing", "Poor", performance_rating)
) |>
filter(salary_type != "week") |>
mutate(
salary_type = if_else(salary_type == "hour", "Hourly", "Salaried")
) |>
filter(!is.na(annual_salary)) |>
select(percent_incr, salary_type, annual_salary, performance_rating)
library(tidyverse)
blizzard_salary <- blizzard_salary
blizzard_salary <- blizzard_salary |>
mutate(
annual_salary = case_when(
salary_type == "week" ~ current_salary * 52,
salary_type == "hour" ~ current_salary * 40 * 52,
TRUE ~ current_salary
),
performance_rating = if_else(performance_rating == "Developing", "Poor", performance_rating)
) |>
filter(salary_type != "week") |>
mutate(
salary_type = if_else(salary_type == "hour", "Hourly", "Salaried")
) |>
filter(!is.na(annual_salary)) |>
select(percent_incr, salary_type, annual_salary, performance_rating)
View(blizzard_salary)
blizzard_salary <- blizzard_salary
View(blizzard_salary)
blizzard_salary <- blizzard_salary
data <- blizzard_salary
View(data)
blizzard_salary <- blizzard_salary |>
mutate(
annual_salary = case_when(
salary_type == "week" ~ current_salary * 52,
salary_type == "hour" ~ current_salary * 40 * 52,
TRUE ~ current_salary
),
performance_rating = if_else(performance_rating == "Developing", "Poor", performance_rating)
) |>
filter(salary_type != "week") |>
mutate(
salary_type = if_else(salary_type == "hour", "Hourly", "Salaried")
) |>
filter(!is.na(annual_salary)) |>
select(percent_incr, salary_type, annual_salary, performance_rating)
blizzard_salary <- blizzard_salary
blizzard_salary <- blizzard_salary |>
mutate(
annual_salary = case_when(
salary_type == "week" ~ current_salary * 52,
salary_type == "hour" ~ current_salary * 40 * 52,
TRUE ~ current_salary
),
performance_rating = if_else(performance_rating == "Developing", "Poor", performance_rating)
) |>
filter(salary_type != "week") |>
mutate(
salary_type = if_else(salary_type == "hour", "Hourly", "Salaried")
) |>
filter(!is.na(annual_salary)) |>
select(percent_incr, salary_type, annual_salary, performance_rating)
library(tidyverse)
library(tidymodels)
library(openintro)
library(scales)
library(ggmosaic)
blizzard_salary <- blizzard_salary
blizzard_salary <- blizzard_salary |>
mutate(
annual_salary = case_when(
salary_type == "week" ~ current_salary * 52,
salary_type == "hour" ~ current_salary * 40 * 52,
TRUE ~ current_salary
),
performance_rating = if_else(performance_rating == "Developing", "Poor", performance_rating)
) |>
filter(salary_type != "week") |>
mutate(
salary_type = if_else(salary_type == "hour", "Hourly", "Salaried")
) |>
filter(!is.na(annual_salary)) |>
select(percent_incr, salary_type, annual_salary, performance_rating)
blizzard_salary <- blizzard_salary |>
mutate(
annual_salary = case_when(
salary_type == "week" ~ current_salary * 52,
salary_type == "hour" ~ current_salary * 40 * 52,
TRUE ~ current_salary
),
performance_rating = if_else(performance_rating == "Developing", "Poor", performance_rating)
) |>
filter(salary_type != "week") |>
mutate(
salary_type = if_else(salary_type == "hour", "Hourly", "Salaried")
) |>
filter(!is.na(annual_salary)) |>
select(percent_incr, salary_type, annual_salary, performance_rating)
install.package("tidymodels")
install.packages("tidymodels")
library(tidymodels)
blizzard_salary <- blizzard_salary
blizzard_salary <- blizzard_salary |>
mutate(
annual_salary = case_when(
salary_type == "week" ~ current_salary * 52,
salary_type == "hour" ~ current_salary * 40 * 52,
TRUE ~ current_salary
),
performance_rating = if_else(performance_rating == "Developing", "Poor", performance_rating)
) |>
filter(salary_type != "week") |>
mutate(
salary_type = if_else(salary_type == "hour", "Hourly", "Salaried")
) |>
filter(!is.na(annual_salary)) |>
select(percent_incr, salary_type, annual_salary, performance_rating)
