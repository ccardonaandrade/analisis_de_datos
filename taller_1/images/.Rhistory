axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank(),  # Remove y-axis ticks
axis.title.y = element_blank(),  # Remove y-axis title
axis.ticks.x = element_line(color = "black", size = 1),  # Increase x-axis tick size
axis.ticks.length = unit(0.3, "cm"),  # Increase length of x-axis ticks
axis.text.x = element_text(size = 14, margin = margin(t = 5))  # Ensure x-axis text is visible
)+
geom_segment(aes(x = 4.3, xend = 4.7, y = 0, yend = 0), color = "black", size = 0.5)  # Add x-axis line
# Plot the normal distribution with highlighted regions
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "navy", size = 1) +
scale_x_continuous(breaks = c(4.5, 4.6),
labels = c(expression(mu == 4.5), expression(bar(X) == 4.6)),
limits = c(4.3, 4.7),
expand = expansion(mult = c(0, 0))  # Remove extra space around x-axis
) +
labs(title = "",
x = "", y = "Density") +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_text(size = 14),  # Increase the size of x and y axis text
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank(),  # Remove y-axis ticks
axis.title.y = element_blank(),  # Remove y-axis title
axis.ticks.x = element_line(color = "black", size = 1),  # Increase x-axis tick size
axis.ticks.length = unit(0.3, "cm"),  # Increase length of x-axis ticks
axis.text.x = element_text(size = 14, margin = margin(t = 5))  # Ensure x-axis text is visible
)+
geom_segment(aes(x = 4.3, xend = 4.7, y = 0, yend = 0), color = "black", size = 0.5)  # Add x-axis line
# Plot the normal distribution with highlighted regions
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "navy", size = 1) +
scale_x_continuous(breaks = c(4.5, 4.6),
labels = c(expression(mu == 4.5), expression(bar(X) == 4.6)),
limits = c(4.3, 4.7),
expand = expansion(mult = c(0, 0))  # Remove extra space around x-axis
) +
labs(title = "",
x = "", y = "Density") +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_text(size = 14),  # Increase the size of x and y axis text
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank(),  # Remove y-axis ticks
axis.title.y = element_blank(),  # Remove y-axis title
axis.ticks.x = element_line(color = "black", size = 1),  # Increase x-axis tick size
axis.ticks.length = unit(0.3, "cm"),  # Increase length of x-axis ticks
axis.text.x = element_text(size = 14, margin = margin(t = 5)),  # Ensure x-axis text is visible
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank()   # Remove minor grid lines
)+
geom_segment(aes(x = 4.3, xend = 4.7, y = 0, yend = 0), color = "black", size = 0.5)  # Add x-axis line
# Plot the normal distribution with highlighted regions
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "navy", size = 1) +
scale_x_continuous(breaks = c(4.5, 4.6),
labels = c(expression(mu == 4.5), expression(bar(X) == 4.6)),
limits = c(4.3, 4.7),
expand = expansion(mult = c(0, 0))  # Remove extra space around x-axis
) +
labs(title = "",
x = "", y = "Density") +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_text(size = 14),  # Increase the size of x and y axis text
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank(),  # Remove y-axis ticks
axis.title.y = element_blank(),  # Remove y-axis title
axis.ticks.x = element_line(color = "black", size = 1),  # Increase x-axis tick size
axis.ticks.length = unit(0.3, "cm"),  # Increase length of x-axis ticks
axis.text.x = element_text(size = 18, margin = margin(t = 5)),  # Ensure x-axis text is visible
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank()   # Remove minor grid lines
)+
geom_segment(aes(x = 4.3, xend = 4.7, y = 0, yend = 0), color = "black", size = 0.5)  # Add x-axis line
# Plot the normal distribution with highlighted regions
ggplot(df, aes(x = x, y = y)) +
geom_line(color = "navy", size = 1) +
scale_x_continuous(breaks = c(4.5, 4.6),
labels = c(expression(mu == 4.5), expression(bar(X) == 4.6)),
limits = c(4.3, 4.7),
expand = expansion(mult = c(0, 0))  # Remove extra space around x-axis
) +
labs(title = "",
x = "", y = "Density") +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_text(size = 14),  # Increase the size of x and y axis text
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank(),  # Remove y-axis ticks
axis.title.y = element_blank(),  # Remove y-axis title
axis.ticks.x = element_line(color = "black", size = 1),  # Increase x-axis tick size
axis.ticks.length = unit(0.3, "cm"),  # Increase length of x-axis ticks
axis.text.x = element_text(size = 18, margin = margin(t = 5)),  # Ensure x-axis text is visible
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank()   # Remove minor grid lines
)+
geom_segment(aes(x = 4.3, xend = 4.7, y = 0, yend = 0), color = "black", size = 0.5)  # Add x-axis line
0.1/(0.5/sqrt(106))
ggplot(df, aes(x = x, y = y)) +
geom_area(aes(y = y, x = ifelse(x > 4.6, x, NA)), fill = "darkred", alpha = 0.5) +
geom_line(color = "navy", size = 1) +
scale_x_continuous(breaks = c(4.5, 4.6),
labels = c(expression(mu == 0), expression(Z == 2)),
limits = c(4.3, 4.7),
expand = expansion(mult = c(0, 0))  # Remove extra space around x-axis
) +
labs(title = "",
x = "", y = "Density") +
theme_minimal() +
theme(
legend.position = "none",
axis.text = element_text(size = 14),  # Increase the size of x and y axis text
axis.text.y = element_blank(),  # Remove y-axis text
axis.ticks.y = element_blank(),  # Remove y-axis ticks
axis.title.y = element_blank(),  # Remove y-axis title
axis.ticks.x = element_line(color = "black", size = 1),  # Increase x-axis tick size
axis.ticks.length = unit(0.3, "cm"),  # Increase length of x-axis ticks
axis.text.x = element_text(size = 28, margin = margin(t = 5)),  # Ensure x-axis text is visible
panel.grid.major = element_blank(),  # Remove major grid lines
panel.grid.minor = element_blank()   # Remove minor grid lines
)+
geom_segment(aes(x = 4.3, xend = 4.7, y = 0, yend = 0), color = "black", size = 0.5)  # Add x-axis line
0.5/sqrt(106)
4.6-0.04856429
4.6+0.04856429
qnorm(1.25, mean=0, sd=1)
pnormGC(1.25, region="above", mean=0,
sd=1,graph=TRUE)
library(tigerstats)
install.packages("tigerstats")
library(tigerstats)
pnormGC(1.25, region="above", mean=0,
sd=1,graph=TRUE)
pnormGC(1.96, region="above", mean=0,
sd=1,graph=TRUE)
pnormGC(0.6, region="above", mean=0,
sd=1,graph=TRUE)
pnormGC(0.7, region="below", mean=0,
sd=1,graph=TRUE)
pnormGC(-1.3, region="below", mean=0,
sd=1,graph=TRUE)
pnormGC(1.3, region="above", mean=0,
sd=1,graph=TRUE)
pnormGC(0.6, region="below", mean=0,
sd=1,graph=TRUE)
pnormGC(-0,6, region="above", mean=0,
sd=1,graph=TRUE)
pnormGC(-0.6, region="above", mean=0,
sd=1,graph=TRUE)
pnormGC(0.7, region="below", mean=0,
sd=1,graph=TRUE)
pnormGC(1.3, region="above", mean=0,
sd=1,graph=TRUE)
pnormGC(c(-0.25,0.25),region="between",mean=0,
sd=1,graph=TRUE)
pnormGC(c(-0.67,0.67),region="between",mean=0,
sd=1,graph=TRUE)
pnormGC(c(-1.20,1.20),region="between",mean=0,
sd=1,graph=TRUE)
pnormGC(3.25, region="above", mean=3,
sd=0.5,graph=TRUE)
pnormGC(3.4, region="below", mean=3,
sd=0.5,graph=TRUE)
pnormGC(c(2.5,3.5),region="between",mean=3,
sd=0.5,graph=TRUE)
qnorm(0.85,mean=500,sd=100)
qnorm(0.90,mean=500,sd=100)
qnorm(0.98,mean=500,sd=100)
pnormGC(650, region="above", mean=600,
sd=50,graph=TRUE)
5/sqrt(50)
-1.5/0.7071068
1-0.9808
0.0192*2
1-0.9945
starbucks_tabulated <-  matrix(c(157, 8, 166, 56, 134, 56, 139, 51,134, 56, 134, 56), nrow=2)
starbucks_tabulated
dimnames(starbucks_tabulated) = list(Whip=c("No Cream","Cream"),
Milk=c("no milk", "nonfat", "2%", "soy", "coconut", "whole"))
starbucks_tabulated
View(starbucks_tabulated)
starbucks_tabulated <-  matrix(c(157, 8, 166, 56, 134, 56, 139, 51,134, 56, 134, 56), nrow=2)
starbucks_tabulated
dimnames(starbucks_tabulated) = list(Whip=c("No Cream","Cream"),
Milk=c("no milk", "nonfat", "2%", "soy", "coconut", "whole"))
starbucks_tabulated
starbucks_tabulated = as.table(starbucks_tabulated)
starbucks_tabulated = as.data.frame(starbucks_tabulated)
starbucks_tabulated
View(starbucks_tabulated)
View(starbucks_tabulated)
starbucks_tabulated <- table(starbucks_tabulated$Whip, starbucks_tabulated$Milk)  # Swap VariableX and VariableY
mosaicplot(starbucks_tabulated, main="", color=TRUE)
starbucks_tabulated <-  matrix(c(157, 8, 166, 56, 134, 56, 139, 51,134, 56, 134, 56), nrow=2)
starbucks_tabulated
starbucks_tabulated = as.table(starbucks_tabulated)
starbucks_tabulated = as.data.frame(starbucks_tabulated)
starbucks_tabulated
View(starbucks_tabulated)
starbucks_tabulated <-  matrix(c(157, 8, 166, 56, 134, 56, 139, 51,134, 56, 134, 56), nrow=2)
starbucks_tabulated
dimnames(starbucks_tabulated) = list(Whip=c("No Cream","Cream"),
Milk=c("no milk", "nonfat", "2%", "soy", "coconut", "whole"))
starbucks_tabulated
starbucks_tabulated <-  as.table(starbucks_tabulated)
starbucks_tabulated <-  as.data.frame(starbucks_tabulated)
starbucks_tabulated
View(starbucks_tabulated)
mosaicplot(starbucks_tabulated, main="", color=TRUE)
proof <- as.data.frame(table(starbucks_tabulated$Whip, starbucks_tabulated$Milk))  # Swap VariableX and VariableY
mosaicplot(proof, main="", color=TRUE)
View(proof)
View(starbucks_tabulated)
# Reverse the order of variables in xtabs
starbucks_table <- xtabs(~ milk + whip, data = starbucks_tabulated)
mosaicplot(starbucks_table, main = "", color = TRUE)
# Reverse the order of variables in xtabs
starbucks_table <- xtabs(~ Milk + Whip, data = starbucks_tabulated)
mosaicplot(starbucks_table, main = "", color = TRUE)
mosaicplot(starbucks_tabulated, main="", color=TRUE)
starbucks_table <- xtabs(Freq ~ Whip + Milk, data = starbucks_tabulated)
starbucks_table <- xtabs(freq ~ whip + milk, data = starbucks)
mosaicplot(t(starbucks_table), main = "", color = TRUE)
mosaicplot((starbucks_table), main = "", color = TRUE)
library(tidyverse)
library(gganimate)
library(magick)
library(patchwork)
library(animation)
library(gapminder)
gapminder <- gapminder
ggplot(gapminder, aes(x=lifeExp, y=gdpPercap, color=continent)) + geom_point()
ggplot(subset(gapminder,year=2001), aes(x=lifeExp, y=gdpPercap, color=continent)) + geom_point()
# Create gif
invisible(saveGIF({
for (i in 1990:2007){
#  p1 <- gapminder %>%
#    filter(continent %in% continents, year==i) %>%
#    ggplot( aes(log(gdpPercap), lifeExp, col = continent)) +
#    geom_point()
p1 <- ggplot(subset(gapminder,year=i),
aes(x=lifeExp, y=gdpPercap, color=continent)) +
geom_point()
p3 <- ggplot(data = NULL, aes(x = 1990:2007, y = 1)) +
geom_line() +
geom_point(aes(fill = (x = 1990:2007 > i)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0","gold")) +
geom_text(aes(x = i, y = 1, label = i), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80"))
# Print plots using patchwork
print(p1 - p3 + plot_layout(ncol = 1, heights = c(5, 1)))
}
}, movie.name = "windDevelopment.gif", interval = 1, ani.width = 1000, ani.height = 700))
setwd("C:/Users/ccard/OneDrive/Documentos/GitHub/analisis_de_datos/taller_1/images")
# Create gif
invisible(saveGIF({
for (i in 1990:2007){
#  p1 <- gapminder %>%
#    filter(continent %in% continents, year==i) %>%
#    ggplot( aes(log(gdpPercap), lifeExp, col = continent)) +
#    geom_point()
p1 <- ggplot(subset(gapminder,year=i),
aes(x=lifeExp, y=gdpPercap, color=continent)) +
geom_point()
p3 <- ggplot(data = NULL, aes(x = 1990:2007, y = 1)) +
geom_line() +
geom_point(aes(fill = (x = 1990:2007 > i)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0","gold")) +
geom_text(aes(x = i, y = 1, label = i), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80"))
# Print plots using patchwork
print(p1 - p3 + plot_layout(ncol = 1, heights = c(5, 1)))
}
}, movie.name = "windDevelopment.gif", interval = 1, ani.width = 1000, ani.height = 700))
# Create gif
invisible(saveGIF({
for (i in 1990:2007){
#  p1 <- gapminder %>%
#    filter(continent %in% continents, year==i) %>%
#    ggplot( aes(log(gdpPercap), lifeExp, col = continent)) +
#    geom_point()
p1 <- ggplot(subset(gapminder,year==i),
aes(x=lifeExp, y=gdpPercap, color=continent)) +
geom_point()
p3 <- ggplot(data = NULL, aes(x = 1990:2007, y = 1)) +
geom_line() +
geom_point(aes(fill = (x = 1990:2007 > i)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0","gold")) +
geom_text(aes(x = i, y = 1, label = i), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80"))
# Print plots using patchwork
print(p1 - p3 + plot_layout(ncol = 1, heights = c(5, 1)))
}
}, movie.name = "windDevelopment.gif", interval = 1, ani.width = 1000, ani.height = 700))
View(gapminder)
View(gapminder)
View(gapminder)
# Create gif
invisible(saveGIF({
for (i in 1990:2007){
#  p1 <- gapminder %>%
#    filter(continent %in% continents, year==i) %>%
#    ggplot( aes(log(gdpPercap), lifeExp, col = continent)) +
#    geom_point()
p1 <- ggplot(subset(gapminder,year==i),
aes(x=lifeExp, y=gdpPercap, color=continent)) +
geom_point()
p3 <- ggplot(data = NULL, aes(x = 1990:2007, y = 1)) +
geom_line() +
geom_point(aes(fill = (x = 1992:2007 > i)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0","gold")) +
scale_x_continuous(breaks = seq(1992, 2007, by = 5)) +
geom_text(aes(x = i, y = 1, label = i), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80"))
# Print plots using patchwork
print(p1 - p3 + plot_layout(ncol = 1, heights = c(5, 1)))
}
}, movie.name = "windDevelopment.gif", interval = 1, ani.width = 1000, ani.height = 700))
# Save the GIF
invisible(saveGIF({
for (i in seq(1992, 2007, by = 5)) { # Loop through the years 1992, 1997, 2002, 2007
# Plot 1: Gapminder data for the specified year
p1 <- ggplot(subset(gapminder, year == i),
aes(x = lifeExp, y = gdpPercap, color = continent)) +
geom_point() +
labs(title = paste("Year:", i))
# Plot 3: Line plot with highlighted points
p3 <- ggplot(data = NULL, aes(x = 1990:2007, y = 1)) +
geom_line() +
geom_point(aes(fill = (1990:2007 > i)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0", "gold")) +
geom_text(aes(x = i, y = 1, label = i), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80"))
# Print plots using patchwork
print(p1 - p3 + plot_layout(ncol = 1, heights = c(5, 1)))
}
}, movie.name = "gapminder_animation.gif", interval = 1, ani.width = 800, ani.height = 600))
# Save the GIF
invisible(saveGIF({
selected_years <- seq(1992, 2007, by = 5) # Define the selected years
for (i in selected_years) { # Loop through the selected years
# Plot 1: Gapminder data for the specified year
p1 <- ggplot(subset(gapminder, year == i),
aes(x = lifeExp, y = gdpPercap, color = continent)) +
geom_point() +
labs(title = paste("Year:", i))
# Plot 3: Line plot with only the selected years
p3 <- ggplot(data = NULL, aes(x = selected_years, y = 1)) +
geom_line() +
geom_point(aes(x = selected_years, fill = (selected_years > i)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0", "gold")) +
geom_text(aes(x = i, y = 1, label = i), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80"))
# Print plots using patchwork
print(p1 - p3 + plot_layout(ncol = 1, heights = c(5, 1)))
}
}, movie.name = "gapminder_animation.gif", interval = 1, ani.width = 800, ani.height = 600))
View(gapminder)
# Save the GIF
invisible(saveGIF({
selected_years <- seq(1952, 2007, by = 5) # Define the selected years
for (i in selected_years) { # Loop through the selected years
# Plot 1: Gapminder data for the specified year
p1 <- ggplot(subset(gapminder, year == i),
aes(x = lifeExp, y = gdpPercap, color = continent)) +
geom_point() +
labs(title = paste("Year:", i))
# Plot 3: Line plot with only the selected years
p3 <- ggplot(data = NULL, aes(x = selected_years, y = 1)) +
geom_line() +
geom_point(aes(x = selected_years, fill = (selected_years > i)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0", "gold")) +
geom_text(aes(x = i, y = 1, label = i), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80"))
# Print plots using patchwork
print(p1 - p3 + plot_layout(ncol = 1, heights = c(5, 1)))
}
}, movie.name = "gapminder_animation.gif", interval = 1, ani.width = 800, ani.height = 600))
# Save the GIF
invisible(saveGIF({
selected_years <- seq(1952, 2007, by = 5) # Define the selected years
for (i in selected_years) { # Loop through the selected years
# Plot 1: Gapminder data for the specified year
p1 <- ggplot(subset(gapminder, year == i),
aes(x = lifeExp, y = log(gdpPercap), color = continent)) +
geom_point() +
labs(title = paste("Year:", i))
# Plot 3: Line plot with only the selected years
p3 <- ggplot(data = NULL, aes(x = selected_years, y = 1)) +
geom_line() +
geom_point(aes(x = selected_years, fill = (selected_years > i)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0", "gold")) +
geom_text(aes(x = i, y = 1, label = i), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80"))
# Print plots using patchwork
print(p1 - p3 + plot_layout(ncol = 1, heights = c(5, 1)))
}
}, movie.name = "gapminder_animation.gif", interval = 1, ani.width = 800, ani.height = 600))
# Save the GIF
invisible(saveGIF({
selected_years <- seq(1952, 2007, by = 5) # Define the selected years
# Define fixed limits for x and y axes
x_limits <- range(gapminder$lifeExp)   # Using the full range of lifeExp in the dataset
y_limits <- range(log(gapminder$gdpPercap))  # Using the log-transformed range of gdpPercap in the dataset
for (i in selected_years) { # Loop through the selected years
# Plot 1: Gapminder data for the specified year
p1 <- ggplot(subset(gapminder, year == i),
aes(x = lifeExp, y = log(gdpPercap), color = continent)) +
geom_point() +
labs(title = paste("Year:", i)) +
xlim(x_limits) +  # Set fixed x-axis limits
ylim(y_limits)    # Set fixed y-axis limits
# Plot 3: Line plot with only the selected years
p3 <- ggplot(data = NULL, aes(x = selected_years, y = 1)) +
geom_line() +
geom_point(aes(x = selected_years, fill = (selected_years > i)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0", "gold")) +
geom_text(aes(x = i, y = 1, label = i), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80")) +
scale_x_continuous(breaks = selected_years)  # Ensure consistent x-axis breaks
# Print plots using patchwork
print(p1 - p3 + plot_layout(ncol = 1, heights = c(5, 1)))
}
}, movie.name = "gapminder_animation.gif", interval = 1, ani.width = 800, ani.height = 600))
# Save the GIF
invisible(saveGIF({
selected_years <- seq(1952, 2007, by = 5) # Define the selected years
for (i in selected_years) { # Loop through the selected years
# Plot 1: Gapminder data for the specified year
p1 <- ggplot(subset(gapminder, year == i),
aes(x = lifeExp, y = log(gdpPercap), color = continent)) +
geom_point() +
labs(title = paste("Year:", i)) +
xlim(range(gapminder$lifeExp)) +  # Set fixed x-axis limits
ylim(range(log(gapminder$gdpPercap)))    # Set fixed y-axis limits
# Plot 3: Line plot with only the selected years
p3 <- ggplot(data = NULL, aes(x = selected_years, y = 1)) +
geom_line() +
geom_point(aes(x = selected_years, fill = (selected_years > i)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0", "gold")) +
geom_text(aes(x = i, y = 1, label = i), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80")) +
scale_x_continuous(breaks = selected_years)  # Ensure consistent x-axis breaks
# Print plots using patchwork
print(p1 - p3 + plot_layout(ncol = 1, heights = c(5, 1)))
}
}, movie.name = "gapminder_animation.gif", interval = 1, ani.width = 800, ani.height = 600))
selected_years <- seq(1952, 2007, by = 5) # Define the selected years
# Define fixed limits for x and y axes
x_limits <- range(gapminder$lifeExp)   # Using the full range of lifeExp in the dataset
y_limits <- range(log(gapminder$gdpPercap))  # Using the log-transformed range of gdpPercap in the dataset
# Create the base plot for animation
p <- ggplot(subset(gapminder, year %in% selected_years),
aes(x = lifeExp, y = log(gdpPercap), color = continent)) +
geom_point() +
xlim(x_limits) +
ylim(y_limits) +
labs(title = "Year: {closest_state}") +
transition_states(year, transition_length = 2, state_length = 1) + # Animate by year
enter_fade() +
exit_fade()
# Additional plot for highlighting the years
p3 <- ggplot(data = data.frame(x = selected_years, y = 1), aes(x = x, y = y)) +
geom_line() +
geom_point(aes(fill = (x > 1952)), shape = 21, size = 5) +
theme_void() +
theme(legend.position = "none") +
scale_fill_manual(values = c("#b2d1e0", "gold")) +
geom_text(aes(x = x, y = 1, label = x), vjust = -1, size = 9) +
theme(panel.background = element_rect(fill = "grey99", colour = "grey80")) +
scale_x_continuous(breaks = selected_years)
# Combine the plots using patchwork
combined_plot <- p - p3 + plot_layout(ncol = 1, heights = c(5, 1))
# Animate the combined plot
animated_plot <- animate(combined_plot, nframes = length(selected_years) * 2, fps = 1)
ggplot(gapminder, aes(x=gdpPercap)) + geom_histogram(binwidth=0.5)
ggplot(gapminder, aes(x=gdpPercap)) + geom_histogram(binwidth=1.5)
ggplot(subset(gapminder, gdpPercap<30000), aes(x=gdpPercap)) + geom_histogram(binwidth=1.5)
ggplot(subset(gapminder, gdpPercap<30000), aes(x=gdpPercap)) + geom_histogram()
ggplot(gapminder, aes(x=gdpPercap)) + geom_histogram()
ggplot(gapminder, aes(x=log(gdpPercap))) + geom_histogram(binwidth=0.5)
ggplot(gapminder, aes(x=log(gdpPercap))) + geom_histogram()
ggplot(gapminder, aes(x=log(gdpPercap))) + geom_histogram(binwidth=0.02)
ggplot(gapminder, aes(x=log(gdpPercap))) + geom_histogram()
ggplot(gapminder, aes(x=log(gdpPercap))) + geom_histogram(binwidth=0.1)
ggplot(gapminder, aes(x=gdpPercap)) + geom_histogram(binwidth = 0.1)
ggplot(gapminder, aes(x=gdpPercap)) + geom_histogram(binwidth = 0.5)
